<%- include("../../views/partials/admin/header") %>
<head>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.css">
    <style>
        .thumbnails-container {
          display: flex;
          flex-wrap: wrap;
          gap: 10px;
          margin-bottom: 15px;
        }
      
        .preview-item {
          position: relative;
          width: 100px;
          height: 100px;
          border: 1px solid #ddd;
          border-radius: 4px;
          overflow: hidden;
        }
      
        .thumbnail {
          width: 100%;
          height: 100%;
          object-fit: cover;
          cursor: pointer;
        }
      
        .thumbnail:hover {
          transform: scale(1.05);
          border-color: #0d6efd;
        }
      
        .btn-remove {
          position: absolute;
          top: 5px;
          right: 5px;
          width: 20px;
          height: 20px;
          background-color: rgba(255, 0, 0, 0.7);
          color: white;
          border: none;
          border-radius: 50%;
          font-size: 16px;
          line-height: 1;
          cursor: pointer;
          display: flex;
          align-items: center;
          justify-content: center;
        }
      
        .image-preview-container {
          margin-top: 15px;
        }
      
        .image-preview {
          max-width: 300px;
          max-height: 300px;
          border: 2px dashed #dee2e6;
          border-radius: 8px;
          object-fit: contain;
        }
      
        .img-container {
          max-height: 400px;
          width: 100%;
          overflow: auto;
          text-align: center;
          position: relative;
          background: #f0f0f0;
        }
      
        .img-container img {
          max-width: 100%;
          max-height: 400px;
          display: block;
          margin: 0 auto;
          min-width: 200px;
        }
      
        .error-message {
          color: #dc3545;
          font-size: 0.875rem;
          margin-top: 5px;
        }
      </style>
    <style>
        .error-message { 
            color: red;
            font-size: 0.875rem;
            margin-top: 4px;
        }
        
        .thumbnails-container { 
            display: flex; 
            overflow-x: auto; 
            padding: 15px;
            gap: 10px;
            background: #f8f9fa;
            border-radius: 5px;
            min-height: 100px;
        }
        
        .thumbnail { 
            width: 100px;
            height: 100px;
            object-fit: cover;
            border-radius: 4px;
            border: 2px solid #dee2e6;
            transition: transform 0.2s;
        }
        
        .thumbnail:hover {
            transform: scale(1.05);
            border-color: #0d6efd;
        }
        
        .variant { 
            margin-bottom: 20px; 
            border: 1px solid #dee2e6; 
            padding: 15px; 
            border-radius: 8px;
            background: #fff;
            position: relative;
        }
        
        .variant label { 
            display: block; 
            margin-bottom: 8px;
            font-weight: 500;
        }
        
        .variant input { 
            margin-bottom: 15px;
            padding: 8px;
            border: 1px solid #dee2e6;
            border-radius: 4px;
            width: 100%;
        }
        
        .image-preview {
            max-width: 300px;
            max-height: 300px;
            margin: 15px 0;
            border: 2px dashed #dee2e6;
            border-radius: 8px;
            display: none;
            object-fit: contain;
        }
        
        .image-container {
            margin-bottom: 20px;
            padding: 20px;
            border: 1px solid #dee2e6;
            border-radius: 8px;
            background: #fff;
        }
        
        .btn-add-variant {
            background: #0d6efd;
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 4px;
            cursor: pointer;
            margin-bottom: 20px;
        }
        
        .btn-add-variant:hover {
            background: #0b5ed7;
        }
        
        .btn-remove-variant {
            background: #dc3545;
            color: white;
            border: none;
            padding: 4px 8px;
            border-radius: 4px;
            cursor: pointer;
            position: absolute;
            right: 10px;
            top: 10px;
        }
        
        .btn-remove-variant:hover {
            background: #bb2d3b;
        }
        
        .image-cropper {
            margin: 20px 0;
            padding: 15px;
            border: 1px solid #dee2e6;
            border-radius: 8px;
            background: #fff;
        }

        .current-images {
            display: flex;
            flex-wrap: wrap;
            gap: 15px;
            margin-bottom: 20px;
        }

        .current-image-container {
            position: relative;
            width: 100px;
            height: 100px;
        }

        .current-image-container img {
            width: 100%;
            height: 100%;
            object-fit: cover;
            border-radius: 4px;
        }

        .delete-image-btn {
            position: absolute;
            top: -8px;
            right: -8px;
            background: #dc3545;
            color: white;
            border: none;
            border-radius: 50%;
            width: 24px;
            height: 24px;
            font-size: 14px;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
        }
    </style>
</head>

<section class="content-main">
    <div class="row">
        <div class="col-9">
            <div class="content-header">
                <h2 class="content-title">Edit Product</h2>
            </div>
        </div>
        <div class="col-lg-6">
            <div class="card mb-4">
                <div class="card-body">
                    <form method="post" action="/admin/editProduct/<%= product._id %>" enctype="multipart/form-data" id="productForm">
                        <div class="mb-4">
                            <label for="product_name" class="form-label">Product Name</label>
                            <input type="text" placeholder="Enter product name" name="productName" class="form-control" 
                                   id="product_name" value="<%= product.productName %>" required>
                            <div id="productName-error" class="error-message"></div>
                        </div>
                        <div class="mb-4">
                            <label class="form-label">Description</label>
                            <textarea placeholder="Enter product description" id="descriptionid" name="description" 
                                      class="form-control" rows="4" required><%= product.description %></textarea>
                            <div id="description-error" class="error-message"></div>
                        </div>
                        
                      
                        
                        <div class="card mb-4">
                            <div class="card-body">
                                <div class="row gx-2">
                                    <div class="col-sm-6 mb-3">
                                        <label class="form-label">Category</label>
                                        <select class="form-select" id="category" name="category" required>
                                            <% for(let i=0; i<cat.length; i++) { %>
                                                <option value="<%=cat[i]._id%>" 
                                                    <%= product.category.toString() === cat[i]._id.toString() ? 'selected' : '' %>>
                                                    <%=cat[i].name%>
                                                </option>
                                            <% } %>
                                        </select>
                                        <div id="category-error" class="error-message"></div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="card mb-4">
                            <div class="card-header">
                              <h4>Product Images</h4>
                            </div>
                            <div class="card-body">
                              <div class="current-images thumbnails-container" id="imagesPreviewContainer">
                                <% if (product.productImage && product.productImage.length > 0) { %>
                                  <% product.productImage.forEach(function(image, index) { %>
                                    <div class="preview-item" data-index="<%= index %>" data-image="<%= image %>">
                                      <img src="<%= image %>" alt="Product Image" class="thumbnail" onerror="this.style.display='none'; this.parentElement.querySelector('.delete-image-btn').style.display='none'; console.log('Image load failed for <%= image %>');">
                                      <button type="button" class="btn btn-sm btn-remove delete-image-btn" data-image="<%= image %>">Ã—</button>
                                    </div>
                                  <% }); %>
                                <% } else { %>
                                  <p>No existing images found.</p>
                                <% } %>
                              </div>
                              <div class="image-upload-container">
                                <div class="mb-3">
                                  <label class="form-label">Upload or Replace Product Images</label>
                                  <input
                                    class="form-control"
                                    type="file"
                                    name="images"
                                    id="input1"
                                    accept="image/png, image/jpeg, image/jpg"
                                    multiple
                                    onchange="handleImageUpload(event)"
                                  />
                                  <small class="text-muted">Add or replace images (at least 1 required)</small>
                                  <div id="images-error" class="error-message"></div>
                                </div>
                                <div class="image-preview-container">
                                  <img src="" alt="Preview" id="imgView1" class="image-preview" style="display: none;">
                                </div>
                              </div>
                              <!-- Image Cropping Modal -->
                              <div class="modal fade" id="imageCropModal" tabindex="-1" aria-labelledby="cropModalLabel" aria-hidden="true">
                                <div class="modal-dialog modal-lg">
                                  <div class="modal-content">
                                    <div class="modal-header">
                                      <h5 class="modal-title" id="cropModalLabel">Crop Image</h5>
                                      <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                    </div>
                                    <div class="modal-body">
                                      <div class="img-container">
                                        <img id="cropperImage" src="" alt="Image to crop" />
                                      </div>
                                    </div>
                                    <div class="modal-footer">
                                      <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                                      <button type="button" class="btn btn-primary" id="cropButton">Crop & Save</button>
                                    </div>
                                  </div>
                                </div>
                              </div>
                            </div>
                          </div>
                        
<div class="card mb-4">
    <div class="card-header">
        <h4>Product Variants</h4>
    </div>
    <div class="card-body">
        <div id="variants">
            <% product.variants.forEach(function(variant) { %>
                <div class="variant">
                    <button type="button" class="btn-remove-variant" onclick="removeVariant(this)">Ã—</button>
                    
                    <label for="size">Size</label>
                    <select class="form-control size-select" name="size" required>
                        <option value="" <%= !variant.size ? 'selected' : '' %>>Select Size</option>
                        <option value="15ml" <%= variant.size === '15ml' ? 'selected' : '' %>>
                            15ml (Small)
                        </option>
                        <option value="50ml" <%= variant.size === '50ml' ? 'selected' : '' %>>
                            50ml (Medium)
                        </option>
                        <option value="100ml" <%= variant.size === '100ml' ? 'selected' : '' %>>
                            100ml (Large)
                        </option>
                    </select>
                    
                    <label>Quantity</label>
                    <input type="number" name="quantity" class="form-control" 
                           value="<%= variant.quantity %>" required min="0">
                    
                    <label>Regular Price</label>
                    <input type="number" name="regularPrice" class="form-control variant-price" 
                           value="<%= variant.regularPrice || '' %>" required min="0">
                           
                    <label>Sale Price</label>
                    <input type="number" name="salesPrice" class="form-control variant-sale-price" 
                           value="<%= variant.salesPrice || '' %>" min="0">
                           
                    <div class="error-message"></div>
                </div>
            <% }); %>
        </div>
        <button type="button" class="btn-add-variant" id="addVariant">Add Variant</button>
        <div id="variants-error" class="error-message"></div>
        <input type="hidden" id="variantsData" name="variants">
    </div>
</div>
                        <div class="text-end">
                            <button class="btn btn-primary" type="submit">Update Product</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</section>
<script src="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.js"></script>


<script src="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.js"></script>
<script>
  let cropper = null;
  let currentImageIndex = null;
  let selectedProductImages = [];

  document.addEventListener('DOMContentLoaded', function () {
    initializeImageHandlers();
    loadExistingImages();

   
    const form = document.querySelector('form');
    if (form) {
      form.addEventListener('submit', handleFormSubmit);
    }
  });

  function initializeImageHandlers() {
    const input = document.getElementById('input1');
    if (input) {
      input.addEventListener('change', handleImageUpload); 
      console.log('File input event listener attached to #input1');
    } else {
      console.error('File input #input1 not found');
    }

    document.getElementById('cropButton').addEventListener('click', handleCrop);
    document.getElementById('cancelCropButton').addEventListener('click', cancelCrop);


    document.querySelectorAll('.delete-image-btn').forEach(button => {
      button.addEventListener('click', function () {
        const container = this.closest('.preview-item');
        const index = parseInt(container.getAttribute('data-index'));
        handleImageDelete(index);
      });
    });
  }

  function loadExistingImages() {
    const existingContainers = document.querySelectorAll('.current-image-container');
    existingContainers.forEach((container, index) => {
      const imageUrl = container.getAttribute('data-image');
      
      if (!selectedProductImages.some(img => img.imageUrl === imageUrl)) {
        selectedProductImages.push({
          src: imageUrl,
          imageUrl: imageUrl,
          isExisting: true,
        });
      }
    });
    renderPreviews();
    console.log('Loaded existing images:', selectedProductImages);
  }

  async function handleImageUpload(event) {
    console.log('handleImageUpload triggered'); 
    const files = event.target.files;
    const errorDiv = document.getElementById('images-error');
    errorDiv.textContent = '';

    if (!files || files.length === 0) {
      console.log('No files selected');
      return;
    }

    for (let file of files) {
      console.log('Processing file:', file.name); 
      const maxFileSize = 5 * 1024 * 1024; 
      const allowedTypes = ['image/jpeg', 'image/png', 'image/jpg'];
      if (!allowedTypes.includes(file.type)) {
        errorDiv.textContent = 'Please upload only JPG, JPEG, or PNG images';
        console.error('Invalid file type:', file.type);
        continue;
      }
      if (file.size > maxFileSize) {
        errorDiv.textContent = 'File size should not exceed 5MB';
        console.error('File too large:', file.size);
        continue;
      }

      try {
        console.log('Uploading file to Cloudinary:', file.name);
        const uploadResult = await handleUpload(file); 
        console.log('Upload successful, secure_url:', uploadResult.secure_url);
        selectedProductImages.push({
          src: uploadResult.secure_url,
          imageUrl: uploadResult.secure_url,
          isExisting: false,
        });
        renderPreviews();
      } catch (error) {
        console.error('Upload failed for file:', file.name, error);
        errorDiv.textContent = 'Failed to upload image to Cloudinary: ' + error.message;
      }
    }
    event.target.value = '';
  }

  function renderPreviews() {
    const container = document.getElementById('imagesPreviewContainer');
    container.innerHTML = '';

    if (selectedProductImages.length === 0) {
      container.innerHTML = '<p>No existing images found.</p>';
      document.getElementById('imgView1').style.display = 'none';
      return;
    }

    selectedProductImages.forEach((item, index) => {
      const thumbnailDiv = document.createElement('div');
      thumbnailDiv.className = 'preview-item';
      thumbnailDiv.setAttribute('data-index', index);
      thumbnailDiv.setAttribute('data-image', item.imageUrl);

      const img = document.createElement('img');
      img.src = item.src;
      img.alt = 'Product Image';
      img.className = 'thumbnail';
      img.style.width = '100px';
      img.style.height = '100px';
      img.style.objectFit = 'cover';
      img.onerror = function () {
        this.style.display = 'none';
        this.parentElement.querySelector('.delete-image-btn').style.display = 'none';
        console.log(`Image load failed for ${item.imageUrl}`);
      };
      img.onclick = () => openCropModal(index);

      const removeBtn = document.createElement('button');
      removeBtn.type = 'button';
      removeBtn.className = 'btn btn-sm btn-remove delete-image-btn';
      removeBtn.innerHTML = 'Ã—';
      removeBtn.addEventListener('click', () => handleImageDelete(index));

      thumbnailDiv.appendChild(img);
      thumbnailDiv.appendChild(removeBtn);
      container.appendChild(thumbnailDiv);
    });

    const preview = document.getElementById('imgView1');
    if (selectedProductImages.length > 0) {
      preview.src = selectedProductImages[0].src;
      preview.style.display = 'block';
    } else {
      preview.style.display = 'none';
    }
    console.log('Rendered previews:', selectedProductImages);
  }

  function openCropModal(index) {
    currentImageIndex = index;
    const cropImage = document.getElementById('cropperImage');
    cropImage.src = selectedProductImages[index].src;
    document.querySelector('.image-cropper').style.display = 'block'; 
    

    if (cropper) {
      cropper.destroy();
      cropper = null;
    }

    cropper = new Cropper(cropImage, {
      aspectRatio: 1,
      viewMode: 1,
      dragMode: 'move',
      autoCropArea: 0.8,
      restore: false,
      guides: true,
      center: true,
      highlight: false,
      cropBoxMovable: true,
      cropBoxResizable: true,
      toggleDragModeOnDblclick: false,
      responsive: true,
      autoCrop: true,
      minContainerWidth: 300,
      minContainerHeight: 400,
    });
    console.log('Cropper initialized for index:', index); 
  }

  async function handleCrop() {
    if (!cropper || currentImageIndex === null) {
      console.log('Cropper or image index not initialized');
      return;
    }

    const canvas = cropper.getCroppedCanvas({ width: 800, height: 800 });
    if (!canvas) {
      console.log('Failed to get cropped canvas');
      return;
    }

    canvas.toBlob(async (blob) => {
      const croppedFile = new File([blob], `cropped_${Date.now()}.jpg`, { type: 'image/jpeg' });
      try {
        console.log('Uploading cropped image to Cloudinary'); 
        const uploadResult = await handleUpload(croppedFile); 
        console.log('Cropped image uploaded, secure_url:', uploadResult.secure_url); 
        selectedProductImages[currentImageIndex] = {
          src: uploadResult.secure_url,
          imageUrl: uploadResult.secure_url,
          isExisting: false,
        };
        renderPreviews();
      } catch (error) {
        console.error('Cropping upload failed:', error);
        document.getElementById('images-error').textContent = 'Failed to upload cropped image to Cloudinary: ' + error.message;
      }

      cropper.destroy();
      cropper = null;
      currentImageIndex = null;
      document.querySelector('.image-cropper').style.display = 'none'; 
    }, 'image/jpeg', 0.9);
  }

  function cancelCrop() {
    if (cropper) {
      cropper.destroy();
      cropper = null;
    }
    currentImageIndex = null;
    document.querySelector('.image-cropper').style.display = 'none'; 
  }

  function handleImageDelete(index) {
    if (selectedProductImages.length <= 1) {
      alert('At least one product image is required');
      return;
    }

    const item = selectedProductImages[index];
    fetch('/admin/deleteSingleImage', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        imageNameToServer: item.imageUrl,
        productIdToServer: '<%= product._id %>',
      }),
    })
      .then((response) => response.json())
      .then((data) => {
        if (data.status) {
          selectedProductImages.splice(index, 1);
          renderPreviews();
        } else {
          alert(data.error || 'Failed to delete image');
        }
      })
      .catch((error) => {
        console.error('Error deleting image:', error);
        alert('Error deleting image. Check server logs.');
      });
  }

  function handleFormSubmit(event) {
    event.preventDefault();

    if (selectedProductImages.length < 1) {
      alert('At least one product image is required');
      return false;
    }

    const formData = new FormData(this);
    selectedProductImages.forEach((item) => {
      formData.append('imageUrls', item.imageUrl);
    });

    const submitBtn = this.querySelector('button[type="submit"]');
    const originalText = submitBtn.innerHTML;
    submitBtn.disabled = true;
    submitBtn.innerHTML = '<span class="spinner-border spinner-border-sm"></span> Saving...';

    fetch(`/admin/editProduct/<%= product._id %>`, {
      method: 'POST',
      body: formData,
    })
      .then((response) => {
        if (response.redirected) {
          window.location.href = response.url;
        } else {
          return response.json();
        }
      })
      .then((data) => {
        if (data && data.error) {
          alert(data.error);
        } else {
          window.location.href = '/admin/product';
        }
      })
      .catch((error) => {
        console.error('Error:', error);
        alert('An error occurred while updating the product');
      })
      .finally(() => {
        submitBtn.disabled = false;
        submitBtn.innerHTML = originalText;
      });
  }
</script>

