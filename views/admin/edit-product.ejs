<%- include("../../views/partials/admin/header") %>
<head>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.css">
    <style>
      .thumbnails-container {
        display: flex;
        flex-wrap: wrap;
        gap: 10px;
        margin-bottom: 15px;
      }
    
      .preview-item {
        position: relative;
        width: 100px;
        height: 100px;
        border: 1px solid #ddd;
        border-radius: 4px;
        overflow: hidden;
      }
    
      .thumbnail {
        width: 100%;
        height: 100%;
        object-fit: cover;
        cursor: pointer;
      }
    
      .thumbnail:hover {
        transform: scale(1.05);
        border-color: #0d6efd;
      }
    
      .btn-remove {
        position: absolute;
        top: 5px;
        right: 5px;
        width: 20px;
        height: 20px;
        background-color: rgba(255, 0, 0, 0.7);
        color: white;
        border: none;
        border-radius: 50%;
        font-size: 16px;
        line-height: 1;
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
      }
    
      .image-preview-container {
        margin-top: 15px;
      }
    
      .image-preview {
        max-width: 300px;
        max-height: 300px;
        border: 2px dashed #dee2e6;
        border-radius: 8px;
        object-fit: contain;
      }
    
      .img-container {
        max-height: 400px;
        width: 100%;
        overflow: auto;
        text-align: center;
        position: relative;
        background: #f0f0f0;
      }
    
      .img-container img {
        max-width: 100%;
        max-height: 400px;
        display: block;
        margin: 0 auto;
        min-width: 200px;
      }
    
      .error-message {
        color: #dc3545;
        font-size: 0.875rem;
        margin-top: 5px;
      }
    </style>
  <style>
      .error-message { 
          color: red;
          font-size: 0.875rem;
          margin-top: 4px;
      }
      
      .thumbnails-container { 
          display: flex; 
          overflow-x: auto; 
          padding: 15px;
          gap: 10px;
          background: #f8f9fa;
          border-radius: 5px;
          min-height: 100px;
      }
      
      .thumbnail { 
          width: 100px;
          height: 100px;
          object-fit: cover;
          border-radius: 4px;
          border: 2px solid #dee2e6;
          transition: transform 0.2s;
      }
      
      .thumbnail:hover {
          transform: scale(1.05);
          border-color: #0d6efd;
      }
      
      .variant { 
          margin-bottom: 20px; 
          border: 1px solid #dee2e6; 
          padding: 15px; 
          border-radius: 8px;
          background: #fff;
          position: relative;
      }
      
      .variant label { 
          display: block; 
          margin-bottom: 8px;
          font-weight: 500;
      }
      
      .variant input { 
          margin-bottom: 15px;
          padding: 8px;
          border: 1px solid #dee2e6;
          border-radius: 4px;
          width: 100%;
      }
      
      .image-preview {
          max-width: 300px;
          max-height: 300px;
          margin: 15px 0;
          border: 2px dashed #dee2e6;
          border-radius: 8px;
          display: none;
          object-fit: contain;
      }
      
      .image-container {
          margin-bottom: 20px;
          padding: 20px;
          border: 1px solid #dee2e6;
          border-radius: 8px;
          background: #fff;
      }
      
      .btn-add-variant {
          background: #0d6efd;
          color: white;
          border: none;
          padding: 8px 16px;
          border-radius: 4px;
          cursor: pointer;
          margin-bottom: 20px;
      }
      
      .btn-add-variant:hover {
          background: #0b5ed7;
      }
      
      .btn-remove-variant {
          background: #dc3545;
          color: white;
          border: none;
          padding: 4px 8px;
          border-radius: 4px;
          cursor: pointer;
          position: absolute;
          right: 10px;
          top: 10px;
      }
      
      .btn-remove-variant:hover {
          background: #bb2d3b;
      }
      
      .image-cropper {
          margin: 20px 0;
          padding: 15px;
          border: 1px solid #dee2e6;
          border-radius: 8px;
          background: #fff;
      }

      .current-images {
          display: flex;
          flex-wrap: wrap;
          gap: 15px;
          margin-bottom: 20px;
      }

      .current-image-container {
          position: relative;
          width: 100px;
          height: 100px;
      }

      .current-image-container img {
          width: 100%;
          height: 100%;
          object-fit: cover;
          border-radius: 4px;
      }

      .delete-image-btn {
          position: absolute;
          top: -8px;
          right: -8px;
          background: #dc3545;
          color: white;
          border: none;
          border-radius: 50%;
          width: 24px;
          height: 24px;
          font-size: 14px;
          cursor: pointer;
          display: flex;
          align-items: center;
          justify-content: center;
      }
  </style>
</head>
<section class="content-main">
    <div class="row">
        <div class="col-9">
            <div class="content-header">
                <h2 class="content-title">Edit Product</h2>
            </div>
        </div>
        <div class="col-lg-6">
            <div class="card mb-4">
                <div class="card-body">
                    <form method="post" action="/admin/editProduct/<%= product._id %>" enctype="multipart/form-data" id="productForm">
                        <div class="mb-4">
                            <label for="product_name" class="form-label">Product Name</label>
                            <input type="text" placeholder="Enter product name" name="productName" class="form-control" 
                                   id="product_name" value="<%= product.productName || '' %>" required>
                            <div id="productName-error" class="error-message"></div>
                        </div>
                        <div class="mb-4">
                            <label class="form-label">Description</label>
                            <textarea placeholder="Enter product description" id="descriptionid" name="description" 
                                      class="form-control" rows="4" required><%= product.description || '' %></textarea>
                            <div id="description-error" class="error-message"></div>
                        </div>
                        <div class="card mb-4">
                            <div class="card-body">
                                <div class="row gx-2">
                                    <div class="col-sm-6 mb-3">
                                        <label class="form-label">Category</label>
                                        <select class="form-select" id="category" name="category" required>
                                            <% for(let i = 0; i < cat.length; i++) { %>
                                                <option value="<%= cat[i]._id %>" 
                                                        <%= product.category._id.toString() === cat[i]._id.toString() ? 'selected' : '' %>>
                                                    <%= cat[i].name %>
                                                </option>
                                            <% } %>
                                        </select>
                                        <div id="category-error" class="error-message"></div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="card mb-4">
                            <div class="card-header">
                                <h4>Product Images</h4>
                            </div>
                            <div class="card-body">
                                <div class="current-images thumbnails-container" id="imagesPreviewContainer">
                                    <% if (product.productImage && product.productImage.length > 0) { %>
                                        <% product.productImage.forEach((image, index) => { %>
                                            <div class="preview-item" data-index="<%= index %>" data-image="<%= image %>">
                                                <img src="<%= image %>" alt="Product Image" class="thumbnail" 
                                                     onerror="this.style.display='none'; this.parentElement.querySelector('.delete-image-btn').style.display='none';">
                                                <button type="button" class="btn btn-sm btn-remove delete-image-btn" 
                                                        data-image="<%= image %>">Ã—</button>
                                            </div>
                                        <% }); %>
                                    <% } else { %>
                                        <p>No existing images found.</p>
                                    <% } %>
                                </div>
                                <div class="image-upload-container">
                                    <div class="mb-3">
                                        <label class="form-label">Upload or Replace Product Images</label>
                                        <input class="form-control" type="file" name="images" id="input1" 
                                               accept="image/png, image/jpeg, image/jpg" multiple 
                                               onchange="handleImageUpload(event)">
                                        <small class="text-muted">Add or replace images (at least 1 required)</small>
                                        <div id="images-error" class="error-message"></div>
                                    </div>
                                    <div class="image-preview-container">
                                        <img src="" alt="Preview" id="imgView1" class="image-preview" style="display: none;">
                                    </div>
                                </div>
                                <!-- Image Cropping Modal (unchanged) -->
                            </div>
                        </div>
                        <div class="card mb-4">
                            <div class="card-header">
                                <h4>Product Variants</h4>
                            </div>
                            <div class="card-body">
                                <div id="variants">
                                    <% if (product.variants && product.variants.length > 0) { %>
                                        <% product.variants.forEach((variant, index) => { %>
                                            <div class="variant" data-index="<%= index %>">
                                                <button type="button" class="btn-remove-variant" onclick="removeVariant(this)">Ã—</button>
                                                <label for="size_<%= index %>">Size</label>
                                                <select class="form-control size-select" name="size_<%= index %>" required>
                                                    <option value="" <%= !variant.size ? 'selected' : '' %>>Select Size</option>
                                                    <option value="15ml" <%= variant.size === '15ml' ? 'selected' : '' %>>15ml (Small)</option>
                                                    <option value="50ml" <%= variant.size === '50ml' ? 'selected' : '' %>>50ml (Medium)</option>
                                                    <option value="100ml" <%= variant.size === '100ml' ? 'selected' : '' %>>100ml (Large)</option>
                                                </select>
                                                <label for="quantity_<%= index %>">Quantity</label>
                                                <input type="number" name="quantity_<%= index %>" class="form-control" 
                                                       value="<%= variant.quantity || 0 %>" required min="0">
                                                <label for="regularPrice_<%= index %>">Regular Price</label>
                                                <input type="number" name="regularPrice_<%= index %>" class="form-control variant-price" 
                                                       value="<%= variant.regularPrice || 0 %>" required min="0">
                                                <label for="salesPrice_<%= index %>">Sale Price</label>
                                                <input type="number" name="salesPrice_<%= index %>" class="form-control variant-sale-price" 
                                                       value="<%= variant.salesPrice || 0 %>" min="0">
                                                <div class="error-message" id="variant-error-<%= index %>"></div>
                                            </div>
                                        <% }); %>
                                    <% } %>
                                </div>
                                <button type="button" class="btn-add-variant" id="addVariant">Add Variant</button>
                                <div id="variants-error" class="error-message"></div>
                                <input type="hidden" id="variantsData" name="variants">
                            </div>
                        </div>
                        <div class="text-end">
                            <button class="btn btn-primary" type="submit">Update Product</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</section>
<script src="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.js"></script>
<script>
  let cropper = null;
  let currentImageIndex = null;
  let selectedProductImages = <%= JSON.stringify(product.productImage || []) %>; // Preload existing images

  document.addEventListener('DOMContentLoaded', function () {
    initializeImageHandlers();
    initializeVariantHandlers();
    loadExistingImages();
    setupLiveValidation(); // Add live validation
  });

  function initializeImageHandlers() {
    const input = document.getElementById('input1');
    if (input) {
      input.addEventListener('change', handleImageUpload);
    }
    document.getElementById('cropButton').addEventListener('click', handleCrop);
    document.querySelectorAll('.delete-image-btn').forEach(button => {
      button.addEventListener('click', function () {
        const container = this.closest('.preview-item');
        const index = parseInt(container.getAttribute('data-index'));
        handleImageDelete(index);
      });
    });
  }

  function initializeVariantHandlers() {
    document.getElementById('addVariant').addEventListener('click', addVariant);
    document.querySelectorAll('.btn-remove-variant').forEach(button => {
      button.addEventListener('click', function () {
        removeVariant(this);
      });
    });
  }

  function loadExistingImages() {
    renderPreviews();
  }

  async function handleImageUpload(event) {
    const files = event.target.files;
    const errorDiv = document.getElementById('images-error');
    errorDiv.textContent = '';

    if (!files || files.length === 0) return;

    for (let file of files) {
      if (!['image/jpeg', 'image/png', 'image/jpg'].includes(file.type)) {
        errorDiv.textContent = 'Please upload only JPG, JPEG, or PNG images';
        continue;
      }
      if (file.size > 5 * 1024 * 1024) {
        errorDiv.textContent = 'File size should not exceed 5MB';
        continue;
      }

      try {
        const uploadResult = await handleUpload(file); // Assume Cloudinary upload
        selectedProductImages.push(uploadResult.secure_url);
        renderPreviews();
      } catch (error) {
        errorDiv.textContent = 'Failed to upload image: ' + error.message;
      }
    }
    event.target.value = '';
  }

  function renderPreviews() {
    const container = document.getElementById('imagesPreviewContainer');
    container.innerHTML = '';

    if (selectedProductImages.length === 0) {
      container.innerHTML = '<p>No existing images found.</p>';
      return;
    }

    selectedProductImages.forEach((image, index) => {
      const div = document.createElement('div');
      div.className = 'preview-item';
      div.setAttribute('data-index', index);
      div.setAttribute('data-image', image);
      div.innerHTML = `<img src="${image}" alt="Product Image" class="thumbnail" onerror="this.style.display='none';">
                       <button type="button" class="btn btn-sm btn-remove delete-image-btn">Ã—</button>`;
      container.appendChild(div);
      div.querySelector('.delete-image-btn').addEventListener('click', () => handleImageDelete(index));
    });
  }

  function handleImageDelete(index) {
    if (selectedProductImages.length <= 1) {
      alert('At least one product image is required');
      return;
    }

    fetch('/admin/deleteSingleImage', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        imageNameToServer: selectedProductImages[index],
        productIdToServer: '<%= product._id %>',
      }),
    })
      .then(response => response.json())
      .then(data => {
        if (data.status) {
          selectedProductImages.splice(index, 1);
          renderPreviews();
        } else {
          alert(data.error || 'Failed to delete image');
        }
      })
      .catch(error => {
        console.error('Error deleting image:', error);
        alert('Error deleting image');
      });
  }

  function openCropModal(index) {
    currentImageIndex = index;
    const cropImage = document.getElementById('cropperImage');
    cropImage.src = selectedProductImages[index];
    cropper = new Cropper(cropImage, { aspectRatio: 1 });
    document.getElementById('imageCropModal').style.display = 'block';
  }

  function handleCrop() {
    cropper.getCroppedCanvas().toBlob(async (blob) => {
      const file = new File([blob], 'cropped.jpg', { type: 'image/jpeg' });
      const uploadResult = await handleUpload(file);
      selectedProductImages[currentImageIndex] = uploadResult.secure_url;
      renderPreviews();
      cropper.destroy();
      document.getElementById('imageCropModal').style.display = 'none';
    });
  }

  function addVariant() {
    const index = document.querySelectorAll('.variant').length;
    const variantDiv = document.createElement('div');
    variantDiv.className = 'variant';
    variantDiv.innerHTML = `
      <button type="button" class="btn-remove-variant" onclick="removeVariant(this)">Ã—</button>
      <label for="size_${index}">Size</label>
      <select class="form-control size-select" name="size_${index}" required>
        <option value="">Select Size</option>
        <option value="15ml">15ml (Small)</option>
        <option value="50ml">50ml (Medium)</option>
        <option value="100ml">100ml (Large)</option>
      </select>
      <label for="quantity_${index}">Quantity</label>
      <input type="number" name="quantity_${index}" class="form-control" value="0" required min="0">
      <label for="regularPrice_${index}">Regular Price</label>
      <input type="number" name="regularPrice_${index}" class="form-control variant-price" value="0" required min="0">
      <label for="salesPrice_${index}">Sale Price</label>
      <input type="number" name="salesPrice_${index}" class="form-control variant-sale-price" value="0" min="0">
      <div class="error-message" id="variant-error-${index}"></div>
    `;
    document.getElementById('variants').appendChild(variantDiv);
  }

  function removeVariant(button) {
    button.closest('.variant').remove();
  }

  function handleFormSubmit(event) {
    event.preventDefault();

    if (selectedProductImages.length < 1) {
      alert('At least one product image is required');
      return;
    }

    const variants = [];
    document.querySelectorAll('.variant').forEach((variant, index) => {
      variants.push({
        size: variant.querySelector(`[name="size_${index}"]`).value,
        quantity: parseInt(variant.querySelector(`[name="quantity_${index}"]`).value) || 0,
        regularPrice: parseFloat(variant.querySelector(`[name="regularPrice_${index}"]`).value) || 0,
        salesPrice: parseFloat(variant.querySelector(`[name="salesPrice_${index}"]`).value) || 0,
      });
    });
    document.getElementById('variantsData').value = JSON.stringify(variants);

    const formData = new FormData(this);
    formData.append('variants', JSON.stringify(variants));
    selectedProductImages.forEach((url, index) => formData.append(`imageUrls[${index}]`, url));

    fetch(`/admin/editProduct/<%= product._id %>`, {
      method: 'POST',
      body: formData,
    })
      .then(response => {
        if (response.redirected) window.location.href = response.url;
        else return response.json();
      })
      .then(data => {
        if (data && data.error) alert(data.error);
        else window.location.href = '/admin/product';
      })
      .catch(error => {
        console.error('Error:', error);
        alert('An error occurred');
      });
  }

  // Live Validation
  function setupLiveValidation() {
    const inputs = {
      productName: document.getElementById('product_name'),
      description: document.getElementById('descriptionid'),
      category: document.getElementById('category'),
    };

    inputs.productName.addEventListener('input', validateField);
    inputs.description.addEventListener('input', validateField);
    inputs.category.addEventListener('change', validateField);

    function validateField(event) {
      const field = event.target;
      const errorDiv = document.getElementById(`${field.id}-error`);
      let isValid = true;

      switch (field.id) {
        case 'product_name':
          if (!field.value.trim()) {
            errorDiv.textContent = 'Product name is required';
            isValid = false;
          } else if (field.value.length < 2) {
            errorDiv.textContent = 'Product name must be at least 2 characters';
            isValid = false;
          } else {
            errorDiv.textContent = '';
          }
          break;
        case 'descriptionid':
          if (!field.value.trim()) {
            errorDiv.textContent = 'Description is required';
            isValid = false;
          } else if (field.value.length < 10) {
            errorDiv.textContent = 'Description must be at least 10 characters';
            isValid = false;
          } else {
            errorDiv.textContent = '';
          }
          break;
        case 'category':
          if (!field.value) {
            errorDiv.textContent = 'Please select a category';
            isValid = false;
          } else {
            errorDiv.textContent = '';
          }
          break;
      }

      field.classList.toggle('is-invalid', !isValid);
      field.classList.toggle('is-valid', isValid);
    }

    // Validate variants live
    document.querySelectorAll('.variant').forEach(variant => {
      const inputs = variant.querySelectorAll('input, select');
      inputs.forEach(input => {
        input.addEventListener('input', function () {
          const errorDiv = variant.querySelector('.error-message');
          let isValid = true;

          if (this.name.includes('size') && !this.value) {
            errorDiv.textContent = 'Size is required';
            isValid = false;
          } else if (this.name.includes('quantity') && (this.value < 0 || !this.value)) {
            errorDiv.textContent = 'Quantity must be a positive number';
            isValid = false;
          } else if (this.name.includes('regularPrice') && (this.value < 0 || !this.value)) {
            errorDiv.textContent = 'Regular price must be a positive number';
            isValid = false;
          } else if (this.name.includes('salesPrice') && this.value < 0) {
            errorDiv.textContent = 'Sale price cannot be negative';
            isValid = false;
          } else {
            errorDiv.textContent = '';
          }

          this.classList.toggle('is-invalid', !isValid);
          this.classList.toggle('is-valid', isValid);
        });
      });
    });
  }
  document.addEventListener('DOMContentLoaded', function() {
  const deleteBtn = document.getElementById('deleteProductBtn');
  if (deleteBtn) {
    deleteBtn.addEventListener('click', confirmDeleteProduct);
  }
});

// Confirm product deletion with modal
function confirmDeleteProduct() {
  if (confirm('Are you sure you want to delete this product? This action cannot be undone.')) {
    deleteProduct();
  }
}

// Handle product deletion
function deleteProduct() {
  fetch(`/admin/deleteProduct/<%= product._id %>`, {
    method: 'DELETE',
    headers: {
      'Content-Type': 'application/json'
    }
  })
  .then(response => response.json())
  .then(data => {
    if (data.success) {
      alert('Product deleted successfully');
      window.location.href = '/admin/product'; // Redirect to products page
    } else {
      alert(data.message || 'Failed to delete product');
    }
  })
  .catch(error => {
    console.error('Error:', error);
    alert('An error occurred while deleting the product');
  });
}

  // Assume handleUpload is defined elsewhere for Cloudinary
  async function handleUpload(file) {
    // Placeholder for Cloudinary upload logic
    return { secure_url: URL.createObjectURL(file) }; // Replace with actual Cloudinary upload
  }
</script>
<%- include("../../views/partials/admin/footer") %>